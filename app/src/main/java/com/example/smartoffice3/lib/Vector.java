package com.example.smartoffice3.lib;public class Vector<T > {    Object[] object;    public Vector(T t1[]){        object = new Object[t1.length];        for (int i = 0; i < t1.length; i++) {            object[i] = t1[i];        }    }    public Vector(int n){        object = new Object[n];    }    public T get(int n){        return (T) object[n];    }    public void concat(Vector<T> vector){        int j = 0;        Object object2[] = new  Object[ size() + vector.size()];        for (int i = 0; i< size(); i++){            object2[i] = object[i];        }        for (int i = size(); i<object2.length; i++){            object2[i]= (T) vector.get(j);            j++;        }        object=object2;    }    public int size(){        return object.length;    }    @Override    public boolean equals(Object obj) {        Vector vector;        int c = 0;        if (getClass() == obj.getClass()){            vector = (Vector) obj;            if (size() == vector.size()){                for (int i = 0; i< size(); i++){                    if (get(i) == vector.get(i)){                        c++;                    }else return false;                }                if (c== size()){                    return true;                }else return false;            }else return false;        }else {            return false;        }    }    public T front(){        return (T) object[0];    }    public T back(){        return (T) object[object.length-1];    }    public void swap(Vector<Integer> vector){        Vector<Integer> vector1 = new Vector<>(0);        vector1.object = vector.object;        vector.object = object;        object = vector1.object;    }    public void inset(T x, int n){        Object xf2[] = new Object[size()+1];        for (int i = 0; i<n; i++){            xf2[i] = object[i];        }        xf2[n]=x;        for (int i=n+1; i < size()+1; i++) {            xf2[i]=object[i-1];        }        object = xf2;    }    public void push_back(T x){        Object xf2[] = new Object[size()+1];        for (int i = 0; i<size(); i++){            xf2[i] = object[i];        }        xf2[size()]= x;        object = xf2;    }    public void pup_back(){        Object xf2[] = new Object[size()-1];        for (int i = 0; i<size()-1; i++){            xf2[i] = object[i];        }        object = xf2;    }    public void erase(int n){        Object xf2[] = new Object[size()-1];        for (int i = 0; i<n; i++){            xf2[i] = object[i];        }        for (int i=n; i < size()-1; i++) {            xf2[i]=object[i+1];        }        object = xf2;    }    public int find(T f){        int n = -1;        for (int i = 0; i < size(); i++) {            if (get(i)==f){                n=i;                break;            }        }        return n;    }    public T accumulate(){        if (getT().getClass() == Integer.class) {            Integer s = 0;            for (int i = 0; i < size(); i++) {                s += (Integer) object[i];            }            return (T) s;        }else if (getT().getClass() == Float.class){            Float s = Float.valueOf(0);            for (int i = 0; i < size(); i++) {                s += (Float) object[i];            }            return (T) s;        }else if (getT().getClass() == Double.class){            Double s = Double.valueOf(0);            for (int i = 0; i < size(); i++) {                s += (Double) object[i];            }            return (T) s;        }        else System.out.print("Error");return null;    }    public void for_each(){        for(Object i: object){            System.out.println(i);        }    }    public T getT(){        return (T) object[0];    }}